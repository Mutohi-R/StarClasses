/* Composition */
.content-grid {
  --padding-inline: 1rem;
  --content-max-width: 1000px;
  --breakout-max-width: 1200px;
  --partial-max-width: 1120px;

  --breakout-size: calc(
    (var(--breakout-max-width) - var(--content-max-width)) / 2
  );

  --partial-size: calc(
    (var(--partial-max-width) - var(--content-max-width)) / 2
  );

  display: grid;
  grid-template-columns:
    [full-width-start] minmax(var(--padding-inline), 1fr)
    [breakout-start] minmax(0, var(--breakout-size))
    [partial-start] minmax(0, var(--partial-size)) 
    [content-start] min(
      100% - (var(--padding-inline) * 2),
      var(--content-max-width)
    )
    [content-end]minmax(0, var(--partial-size)) 
    [partial-end] minmax(
      0,
      var(--breakout-size)
    )
    [breakout-end]minmax(var(--padding-inline), 1fr) 
    [full-width-end];
}

.content-grid > :not(.breakout, .full-width),
.full-width > :not(.breakout, .full-width) {
  grid-column: content;
}

.content-grid > .breakout {
  grid-column: breakout;
}

.content-grid > .partial {
  grid-column: partial;
}

.content-grid > .full-width {
  grid-column: full-width;

  display: grid;
  grid-template-columns: inherit;
}

.even-columns {
  display: grid;

  @media only screen and (width > 800px) {
    grid-auto-flow: column;
    grid-auto-columns: 1fr;
  }
}

.flow > :where(:not(:first-child)) {
  margin-block-start: var(--_flow-spacer, 0.5em);
}

.grid-flow {
  display: grid;
  gap: var(--_gap, 1rem);
}

.flex-row {
  display: flex;
  gap: var(--_gap, 1rem);
}
